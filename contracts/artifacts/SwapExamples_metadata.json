{
	"compiler": {
		"version": "0.8.6+commit.11564f7e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "DAI",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "USDC",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "WETH9",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "poolFee",
				"outputs": [
					{
						"internalType": "uint24",
						"name": "",
						"type": "uint24"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					}
				],
				"name": "swapExactInputSingle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountInMaximum",
						"type": "uint256"
					}
				],
				"name": "swapExactOutputSingle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "swapRouter",
				"outputs": [
					{
						"internalType": "contract ISwapRouter",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"swapExactInputSingle(uint256)": {
					"details": "The calling address must approve this contract to spend at least `amountIn` worth of its DAI for this function to succeed.",
					"params": {
						"amountIn": "The exact amount of DAI that will be swapped for WETH9."
					},
					"returns": {
						"amountOut": "The amount of WETH9 received."
					}
				},
				"swapExactOutputSingle(uint256,uint256)": {
					"details": "The calling address must approve this contract to spend its DAI for this function to succeed. As the amount of input DAI is variable, the calling address will need to approve for a slightly higher amount, anticipating some variance.",
					"params": {
						"amountInMaximum": "The amount of DAI we are willing to spend to receive the specified amount of WETH9.",
						"amountOut": "The exact amount of WETH9 to receive from the swap."
					},
					"returns": {
						"amountIn": "The amount of DAI actually spent in the swap."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"swapExactInputSingle(uint256)": {
					"notice": "swapExactInputSingle swaps a fixed amount of DAI for a maximum possible amount of WETH9 using the DAI/WETH9 0.3% pool by calling `exactInputSingle` in the swap router."
				},
				"swapExactOutputSingle(uint256,uint256)": {
					"notice": "swapExactOutputSingle swaps a minimum possible amount of DAI for a fixed amount of WETH."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"uniswap_test/contracts/SwapExamples.sol": "SwapExamples"
		},
		"evmVersion": "berlin",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
				"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
			"keccak256": "0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652",
				"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS"
			]
		},
		"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
			"keccak256": "0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://a8a2c3e55965b61bcd91993d8e1d5d34b8b8a63e0fdfce87a85f6af92526fd53",
				"dweb:/ipfs/QmQj2CSCSwqDSU4KMNWxGsN2336Cy64WgpV1X1EHXNZWxM"
			]
		},
		"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
			"keccak256": "0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://da1d1e81e5bf534f0bf2934b3193db6cb1933f91ec006d2b88e9ad10a617a2d2",
				"dweb:/ipfs/QmcPBk47QLMFWcX2y2S9eMFsJgoYWBd3R8ey55Bgmv6w6v"
			]
		},
		"uniswap_test/contracts/SwapExamples.sol": {
			"keccak256": "0xb99c4d1ae696bd923c75ce3088daa80ff3f5d43da6a69af419c0a545ed6dbbf7",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://07e2a01614c08024e03a8870569f181097edfdf75743e34791fb9de153cdbe01",
				"dweb:/ipfs/QmdT4V6nS9YcmJ8wvCipV45d4i99a2B768Erez7qaxSoek"
			]
		}
	},
	"version": 1
}